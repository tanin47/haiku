class Native__Void
end

class Native__PointerInt
end

class Native__Int
end

class Native__Null
end

class Native__String
end

class Native__Char
end

class Native__Any
end

def native__vprintf(text: Native__String, args...: Native__Any): Native__Void
end

class NativeStruct__Process(pid: Native__Int, in: Native__Int, out: Native__Int, err: Native__Int)
end

def native__lilit_exec(cmd: Native__String): Struct__Process
end

def native__write(in: Native__Int, c: Native__Char): Native__Void
end

def native__read(out: Native__Int): Native__Char
end

def native__lilit_wait(pid: Native__Int): Native__Int
end

class Void
end

class Int(underlying: Native__Int)
end

class String(underlying: Native__String)
end

class Char(underlying: Native__Char)
end

class Any
end

class ReadPipe(pipe: Native__Int)
  def read(): Char
  end
end

class WritePipe(pipe: Native__Int)
  def write(c: Char): Char
  end
end

class Process(pid: Int, in: WritePipe, out: ReadPipe, err: ReadPipe)
  def wait(): Int
    Int(native__lilit_wait(pid.underlying))
  end

  def read(): Char
    Char(native__read(out))
  end

  def write(c: Char): Void
    native__write(in, c)
  end
end

class Exec(cmd: String)
  def start(): Process
    val process = native__lilit_exec(cmd.underlying)
    Process(process.pid, WritePipe(process.in), ReadPipe(process.out), ReadPipe(process.err))
  end
end

def main: Int
  native__printf("before".underlying)
  val proc = Exec("ls").start()
  proc.write('c')
  proc.read()
  proc.write('b')
  native__printf("Exit %d", proc.wait().underlying)
  native__printf("after".underlying)
  0
end

