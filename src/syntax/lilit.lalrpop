use std::str::FromStr;
use syntax::tree::*;

grammar;

pub Mod: Box<Mod> = {
  <u:ModUnit*> => Box::new(Mod { units:u }),
};

ModUnit: Box<ModUnit> = {
	<Class> => Box::new(ModUnit::Class(<>)),
	<Func> => Box::new(ModUnit::Func(<>)),
};

Class: Box<Class> = {
  "class" <n:ClassName> <e:ClassExtend?> <m:Func*> "end" => Box::new(Class {
    name:n,
    extends: match e {
    	None => vec![],
    	Some(e) => e,
    },
    methods:m,
  })
};

ClassExtend: Vec<String> = {
  "extends" <e:ClassName> <v:("," <ClassName>)*> => {
  	let mut v = v;
  	v.insert(0, e);
  	v
  }
};

LlvmClassName: String = {
  r"@[A-Z][a-zA-Z0-9_]*" => String::from(<>),
};

ClassName: String = {
  r"[A-Z][a-zA-Z0-9_]*" => String::from(<>),
};

Func: Box<Func> = {
  "def" <name:Name> "(" ")" <exprs:Expr*> "end" => Box::new(Func { name:name, exprs:exprs }),
};

Expr: Box<Expr> = {
  <NumExpr>,
  <Boolean>,
  <Invoke>,
  <Assignment>,
  <ReadVar>,
  <LiteralString>,
  <IfElse>,
  <ComparisonExpr>,
  <ClassInstance>
};

ClassInstance: Box<Expr> = {
  <name:ClassName> "(" <expr:Expr> ")" => Box::new(Expr::ClassInstance(Box::new(ClassInstance { name, is_llvm: false, expr }))),
  <name:LlvmClassName> "(" <expr:Expr> ")" => {
    Box::new(Expr::ClassInstance(Box::new(ClassInstance { name: String::from(&name[1..name.len()]), is_llvm: true, expr })))
  },
};

// TODO(tanin): Comparison should take Exprs. But there is a problem with ambiguity. We should handle it
ComparisonExpr: Box<Expr> = {
  <Comparison> => Box::new(Expr::Comparison(<>)),
};

Comparison: Box<Comparison> = {
  <left:Var> ">" <right:Num> => Box::new(Comparison { left, right }),
};

IfElse: Box<Expr> = {
  "if" <cond: Comparison> "{" <true_br: Expr> "}" "else" "{" <false_br: Expr> "}" => Box::new(Expr::IfElse(Box::new(IfElse { cond, true_br, false_br }))),
};

LiteralString: Box<Expr> = {
  r#""[^"]*""# => {
    let s = String::from(<>);
    let len = s.len();
    Box::new(Expr::LiteralString(Box::new(LiteralString { content: String::from(&s[1..len-1]) })))
  }
};

Assignment: Box<Expr> = {
  "val" <var:Var> "="  <expr:Expr> => Box::new(Expr::Assignment(Box::new(Assignment { var, expr })))
};

Invoke: Box<Expr> = {
  <name:Name> "(" <expr:Expr> ")" => Box::new(Expr::Invoke(Box::new(Invoke { name: name, arg: expr }))),
};

ReadVar: Box<Expr> = {
  <Var> => Box::new(Expr::Var(<>))
};

Var: Box<Var> = {
  <Name> => Box::new(Var { name: <> })
};

Name: String = {
  r"[a-z][A-Za-z0-9_]*" => String::from(<>),
};

Boolean: Box<Expr> = {
  "true" => Box::new(Expr::Boolean(Box::new(Boolean { value: true }))),
  "false" => Box::new(Expr::Boolean(Box::new(Boolean { value: false }))),
};

NumExpr: Box<Expr> = {
  <Num> => Box::new(Expr::Num(<>)),
};

Num: Box<Num> = {
  r"[0-9]+" => Box::new(Num { value: i32::from_str(<>).unwrap() }),
};
