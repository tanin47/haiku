use std::str::FromStr;
use ast::*;

grammar;

pub Mod: Box<Mod> = {
  <u:ModUnit*> => Box::new(Mod { units:u }),
};

ModUnit: Box<ModUnit> = {
	<Class> => Box::new(ModUnit::ClassUnit(<>)),
	<Func> => Box::new(ModUnit::FuncUnit(<>)),
};

Class: Box<Class> = {
  "class" <n:r#"[A-Z][a-z0-9_]*"#> <e:ClassExtend?> <m:Func*> "end" => Box::new(Class {
    name:Box::new(String::from(n)),
    extends: match e {
    	None => vec![],
    	Some(e) => e,
    },
    methods:m,
  })
};

ClassExtend: Vec<Box<String>> = {
  "extends" <e:Name> <v:("," <Name>)*> => {
  	let mut v = v;
  	v.insert(0, e);
  	v
  }
};

Func: Box<Func> = {
  "def" <id:Id> "(" ")" <expr:Expr> "end" => Box::new(Func { name:id, expr:expr }),
};

Expr: Box<Num> = {
  <n:Num> => Box::new(Num { value:n }),
};

Id: Box<String> = {
  r"[a-z][a-z0-9_]*" => Box::new(String::from(<>)),
};

Name: Box<String> = {
  r"[A-Z][a-z0-9_]*" => Box::new(String::from(<>)),
};

Num: i32 = {
  r"[0-9]+" => i32::from_str(<>).unwrap(),
};
